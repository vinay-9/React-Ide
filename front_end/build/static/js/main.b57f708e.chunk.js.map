{"version":3,"sources":["background.png","CodeBox.js","App.js","serviceWorker.js","index.js"],"names":["require","axios","CodeBox","useState","code","setcode","mode","setmode","token","settoken","result","setresult","input","setinput","src","back","align","className","name","onChange","e","data","target","value","console","log","preventDefault","editor","options","lineWrapping","theme","keyMap","tabSize","lint","lineNumbers","onClick","method","url","params","base64_encoded","wait","fields","headers","JSON","stringify","source_code","stdin","language_id","request","then","response","catch","error","getoptions","status","description","stdout","executeCode","TextArea","inputProps","step","srcDoc","title","sandbox","width","height","App","useEffect","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.b57f708e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background.f31f79a6.png\";","import \"codemirror/lib/codemirror.css\";\r\nimport React, { useState, useEffect, ReactDOM } from 'react';\r\n// import CodeMirror from '@uiw/react-codemirror';\r\nimport { Form, TextArea } from 'semantic-ui-react'\r\nimport {Controlled as ControlledEditor} from 'react-codemirror2'\r\nimport {UnControlled as CodeMirror} from 'react-codemirror2'\r\nimport { TextField } from '@material-ui/core';\r\nimport 'codemirror/addon/display/autorefresh';\r\nimport 'codemirror/addon/comment/comment';\r\nimport 'codemirror/addon/edit/matchbrackets';\r\nimport 'codemirror/keymap/sublime';\r\nimport 'codemirror/theme/monokai.css';\r\nimport 'codemirror/theme/dracula.css';\r\nimport back from './background.png'\r\nrequire('codemirror/mode/javascript/javascript');\r\nconst axios= require('axios');\r\n\r\nfunction CodeBox() {\r\n    const [code, setcode] = useState(`       #include <iostream>\r\n        using namespace std;\r\n\r\n        int main() {\r\n        cout << \"Hello World!\";\r\n        return 0;\r\n        }`);\r\n    // 54= C++, 62=Java\r\n    const [mode, setmode] = useState(54)\r\n    const [token, settoken]= useState(\"\");\r\n    const [result, setresult]= useState(\"\")\r\n    const [input, setinput]= useState(\"\");\r\n  \r\n    const inputProps = {\r\n        step: 300,\r\n      };\r\n   \r\n//     useEffect(() => {\r\n//         mode===54? \r\n//             setcode(`#include <iostream>\r\n// using namespace std;\r\n\r\n// int main() {\r\n// cout << \"Hello World!\";\r\n// return 0;\r\n// }`)\r\n//             :setcode(`public class Main {\r\n//                     public static void main(String[] args) {\r\n//                         System.out.println(\"Hello World\");\r\n//                 }\r\n//               }`)\r\n//     }, [mode])\r\n  \r\n    //   const onBeforeChange= (editor, data, value)=>{\r\n    //       console.log(code)\r\n    //   }\r\n    const handleChange=(editor, data, value)=>{\r\n        setcode(value)\r\n        console.log(code)\r\n    }\r\n    const handleChangeMode = (data)=>{\r\n        data===\"C++\"? setmode(54) : setmode(62)\r\n        data===\"C++\"? \r\n            setcode(`#include <iostream>\r\n                    using namespace std;\r\n\r\n                    int main() {\r\n                    cout << \"Hello World!\";\r\n                    return 0;\r\n                    }`)\r\n            :setcode(`public class Main {\r\n                    public static void main(String[] args) {\r\n                        System.out.println(\"Hello World\");\r\n                }\r\n              }`)\r\n        \r\n    }\r\n\r\n    const executeCode =  ()=>{\r\n        // await axios.get('/').then(response=>{\r\n        //     console.log(\"from backcend\",response.data);\r\n        // })\r\n        var options = {\r\n                method: 'POST',\r\n                url: 'https://judge0-ce.p.rapidapi.com/submissions',\r\n                params: {base64_encoded: 'false', wait: 'true', fields: '*'},\r\n                headers: {\r\n                  'content-type': 'application/json',\r\n                //   'x-rapidapi-key': '098ff97f16mshec4444d56e91a23p14d2edjsn79769e2abfde',\r\n                'x-rapidapi-key': 'bd7cf329bemshae8e6053840605ep166442jsnc60488059d95',\r\n\r\n                  'x-rapidapi-host': 'judge0-ce.p.rapidapi.com'\r\n                },\r\n                data:JSON.stringify({\r\n                    // language_id:mode,\r\n                    // source_code: 'I2luY2x1ZGUgPHN0ZGlvLmg+CgppbnQgbWFpbih2b2lkKSB7CiAgY2hhciBuYW1lWzEwXTsKICBzY2FuZigiJXMiLCBuYW1lKTsKICBwcmludGYoImhlbGxvLCAlc1xuIiwgbmFtZSk7CiAgcmV0dXJuIDA7Cn0=',\r\n                    // stdin: 'SnVkZ2Uw'\r\n                    source_code: code,\r\n                    stdin:input,\r\n                    language_id: mode,\r\n   \r\n                  }),\r\n        \r\n        };\r\n        \r\n\r\n        axios.request(options).then(function (response) {\r\n            console.log(response.data.token);\r\n            settoken(response.data.token)\r\n            setmode(response.data.language_id)\r\n            console.log(mode)\r\n        }).catch(function (error) {\r\n            console.log(\"error from submission\")\r\n            console.error(error);\r\n        });\r\n\r\n\r\n            var getoptions = {\r\n                method: 'GET',\r\n                url: `https://judge0-ce.p.rapidapi.com/submissions/${token}`,\r\n                params: {base64_encoded: 'false', fields: '*'},\r\n                headers: {\r\n                    // 'x-rapidapi-key': '098ff97f16mshec4444d56e91a23p14d2edjsn79769e2abfde',\r\n                    'x-rapidapi-key': 'bd7cf329bemshae8e6053840605ep166442jsnc60488059d95',\r\n\r\n                    'x-rapidapi-host': 'judge0-ce.p.rapidapi.com'\r\n                }\r\n            };\r\n\r\n             axios.request(getoptions).then(function (response) {\r\n                console.log(response.data,\" from the url \", getoptions.url)\r\n                response.data.status.description=== \"Accepted\"?\r\n                setresult(response.data.stdout):\r\n                setresult(response.data.status.description)\r\n                console.log(result)\r\n\r\n            }).catch(function (error) {\r\n                console.log(\"error from get +\", error, \"url \\n \",getoptions.url);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <img src={back}/>\r\n        <h1 align=\"center\"> Welcome to CodeBoxðŸ’»</h1>\r\n        <div className= \"container\">\r\n            <div className=\"navbar\">\r\n                <select className=\"select\" \r\n                name=\"select\" \r\n                onChange={(e)=>{\r\n                    handleChangeMode(e.target.value);\r\n                    console.log(mode);\r\n                    e.preventDefault()\r\n                }}>\r\n                    <option value=\"C++\"> C++</option>\r\n                    <option value=\"Java\"> Java</option>\r\n                </select>\r\n\r\n             <CodeMirror\r\n                onChange={\r\n                    handleChange              \r\n                }\r\n                // onBeforeChange={onBeforeChange}\r\n                // onFocus= {handleChange}\r\n                value= {code}\r\n                className= \"code-mirror-wrapper\"\r\n                options={{\r\n                    lineWrapping: true,\r\n                    theme : \"dracula\",\r\n                    keyMap: 'sublime',\r\n                    tabSize: 4,\r\n                    lint: true,\r\n                    mode: mode===54? \"C++\": \"Java\",\r\n                    lineNumbers: true\r\n                }}\r\n                ></CodeMirror>\r\n\r\n                <button \r\n                onClick={()=>{\r\n                    executeCode();\r\n                }}> Submit </button>\r\n\r\n                <h3> Input </h3>\r\n                <TextArea  \r\n                    name=\"input\" \r\n                    value= {input}\r\n                    inputProps= {inputProps}\r\n                    onChange={(e)=>{\r\n                        e.preventDefault()\r\n                        setinput(e.target.value)}}\r\n                    className=\"input\"\r\n                \r\n                />\r\n\r\n                <h3> Output </h3>\r\n                <iframe \r\n                    srcDoc= {result}\r\n                    title = \"output\"\r\n                    sandbox= \"allow-scripts\"\r\n                    width= \"100%\"\r\n                    height= \"100%\"\r\n                >\r\n\r\n                </iframe>\r\n            </div>  \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CodeBox;\r\n\r\n         ","import React, { useState, useEffect, ReactDOM } from 'react';\r\nimport './App.css';\r\nimport {BrowserRouter  as Router, Route, Switch} from 'react-router-dom';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ThumbDownOutlinedIcon from '@material-ui/icons/ThumbDownOutlined';\r\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined';\r\nimport CodeBox from './CodeBox'\r\nimport CodeBox2 from './CodeBox2'\r\n\r\n\r\nexport default function App() {\r\n  useEffect(() => {\r\n      // add the requirements when age needs to be updated/reloaded\r\n      }, [])\r\n\r\n\r\nreturn (\r\n<Router> \r\n    <Switch>\r\n        <Route exact path=\"/\">\r\n            <CodeBox/>\r\n         </Route>\r\n         {/* <Route path=\"/search/:city\">\r\n         <Route path=\"/search\">\r\n            <WeatherContent/>\r\n         </Route>\r\n\r\n        <Route exact path=\"/login\">\r\n            <Login/>\r\n        </Route> */}\r\n    </Switch>\r\n</Router>\r\n\r\n    );\r\n\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App   from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  \r\n  <React.StrictMode>\r\n    \r\n      <App/>\r\n  </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}